<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Yharim Area</title>
    <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Yharim Area</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>状态压缩</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</guid>
      <description>简介#由于 bool 变量只有 $0$ 和 $1$ 两种值，二进制位也具备此特征，故每个 bool 数组都可用一个二进制数表示.
将 bool 数组 $a$（长为 $n$）用 $n$ 位二进制数表示，它的第 $i$ 位表示 $a[i]$.
状态压缩的相关操作方法：
操作 运算 取出第 $k$ 位数 (n &amp;gt;&amp;gt; (k - 1)) &amp;amp; 1 将第 $k$ 位取反 n ^= (1 &amp;lt;&amp;lt; (k - 1)) 将第 $k$ 位赋值为 $1$ n |= (1 &amp;lt;&amp;lt; (k - 1)) 将第 $k$ 位赋值为 $0$ n &amp;amp;= ~ (1 &amp;lt;&amp;lt; (k - 1)) lowbit 运算#$lowbit(n)$：$n$ 在二进制下「最低位的 $1$ 和其后所有的 $0$」构成的数.</description>
    </item>
    
    <item>
      <title>高精度</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <description>简介#高精度是支持高位数的运算系统. 本章仅介绍最常用的正整数运算系统.
构造#在 vector&amp;lt;int&amp;gt; 容器内保存每位数字，并实现自动处理进位.
vector&amp;lt;int&amp;gt; 的位数要从 $0$ 记起（第 $0$ 位，第 $1$ 位，$\cdots$）.
struct Wint:vector&amp;lt;int&amp;gt; { // 以 vector 为基类 Wint(int n = 0) { // 初始化为 0 push_back(n); upgrade(); } Wint&amp;amp; upgrade() { // 处理进位 while (!empty() &amp;amp;&amp;amp; !back()) pop_back(); // 去除最高位多余的 0 if (empty()) return *this; for (int i = 1; i &amp;lt; size(); i ++) { // 满 10 进 1 (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() &amp;gt;= 10) { // 最高位 &amp;gt;= 10 时，新增一位 push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; } }; 输入#取出字符串的每一位，倒序存入数组.</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/</guid>
      <description>简介#搜索算法：枚举问题的所有可能答案，并逐一校验.
案例#设集合 $A$ 满足以下性质：
若 $x\in A$，则 $2x$ 和 $3x-1$ 必属于 $A$. 已知 $3\in A$，问 $23$ 是否属于 $A$？
$A$ 的性质可抽象为下图：
$$\xymatrix@C=0em{&amp;amp; x \ar[dl]\ar[dr] &amp;amp;\\\margin 2x \margin &amp;amp; &amp;amp; 3x-1}$$
以 $3$ 为树根，向下拓展树形图. 于是只需搜索 $23$ 是否在树中.
$$\xymatrix@C=0em{&amp;amp;&amp;amp;&amp;amp;3\ar[dll]\ar[drr]\\&amp;amp;6\ar[dl]\ar[dr]&amp;amp;&amp;amp;&amp;amp;&amp;amp;8\ar[dl]\ar[dr]\\12&amp;amp;&amp;amp;17&amp;amp;&amp;amp;16&amp;amp;&amp;amp;23}$$
对于复杂的问题，可以先抽象出关系图，再搜索求解.
广度优先搜索（BFS）#广度优先搜索（Breadth First Search，BFS）按层次搜索节点. 其原理如下：
建立空队列. 将根节点入队. 取出队头，将其所有子节点入队. 重复上一步直到队列为空. BFS 搜索该图的步骤：
节点 $1$ 入队 节点 $1$ 出队，$2,3$ 入队 节点 $2$ 出队，$4,5$ 入队 节点 $3$ 出队，$6,7$ 入队 节点 $4$ 出队 节点 $5$ 出队 节点 $6$ 出队 节点 $7$ 出队 $$\xymatrix@C=0.</description>
    </item>
    
    <item>
      <title>二分</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</guid>
      <description>简介#玩个游戏.
想一个 $1000$ 以内的正整数 $n$. 每次我给出一个整数 $x$，告诉我「$n&amp;gt;x$」「$n&amp;lt;x$」或「$n=x$」. 我能保证在 $10$ 次以内猜到它.
首先我猜 $x=500$. 除了正好猜中以外，我能把 $n$ 的范围缩小一半.
$n&amp;gt;x\intro n\in[501,1000]$ $n&amp;lt;x\intro n\in[1,499]$ 然后如法炮制，重复给出可行范围的中间数，每次都能把范围折半. 由于 $\log_2{1000}&amp;lt;10$，最多 $10$ 次就能确定 $n$.
例 $n=324$：
$x=500$. $n&amp;lt;x\intro n\in[1,499]$. $x=250$. $n&amp;gt;x\intro n\in[251,499]$. $x=375$. $n&amp;lt;x\intro n\in[251,375]$. $x=313$. $n&amp;gt;x\intro n\in[313,375]$. $x=344$. $n&amp;lt;x\intro n\in[313,344]$. $x=328$. $n&amp;lt;x\intro n\in[313,328]$. $x=320$. $n&amp;gt;x\intro n\in[320,328]$. $x=324$. $n=x$. 条件#数组须呈现广义上的「单调性」.
将数组 $a$ 对半分，前段都不满足 $P$，后段都满足 $P$，则可用二分算法确定分割点，进而确定「第一个满足 $P$ 的元素」.
原理#查找数组 $a$（长度 $n$）中第一个满足条件 $P$ 的元素：</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</guid>
      <description>简介#排序数组 $a$（长度 $n$）中的元素. 本章只研究升序排序.
选择排序#在第 $i$ 次遍历中，交换 $a[i]$ 和第 $i$ 小的数.
时间复杂度：$O(n^2)$.
for (int i = 1; i &amp;lt;= n; i ++) { int tmp = i; // tmp: 第 i 小的数 for (int j = i + 1; j &amp;lt;= n; j ++) if (a[j] &amp;lt; a[tmp]) tmp = j; swap(a[i], a[tmp]); } 冒泡排序#重复扫描数组 $a$. 若 $a[i]&amp;gt;a[i+1]$ 就交换它们. 当没有可交换元素时结束排序.
时间复杂度：$O(n^2)$.
while (true) { bool swapped = false; for (int i = 1; i &amp;lt;= n; i ++) { if (a[i] &amp;gt; a[i + 1]) { swap(a[i], a[i + 1]); swapped = true; } } if (!</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/</guid>
      <description>递归的定义：参见 递归.
简介#你去找银行经理办事.
经理 A：不关我的事. 找经理 B.
经理 B：不关我的事. 找经理 A.
于是你在两个经理之间往返了一整天. 在程序中，该行为称作「递归」.
直接递归#函数 f() 在内部调用了自己.
void f() { /* Do something */ f(); } 这和以下死循环等价.
while (true) { /* Do something */ } 间接递归#这类似于两个银行经理的情况.
void A() { B(); } void B() { A(); } 边界条件#合法的递归需要边界条件，使函数在恰当的时机停止.
void f() { if (.../* 边界条件 */) return; /* Do something */ f(); } 这和以下循环等价.</description>
    </item>
    
  </channel>
</rss>
