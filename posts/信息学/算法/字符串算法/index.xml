<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串 on Yharim Area</title>
    <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 字符串 on Yharim Area</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AC 自动机</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/ac-%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/ac-%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <description>简介#AC 自动机不是能自动 AC 的机器，而是一种著名的多模式串匹配算法.
问题#给定 $n$ 个模式串 $A_1\sim A_n$ 和一个长为 $m$ 的主串 $S$，问有多少个模式串在 $S$ 中出现过.
假设 $n$ 个模式串互不相同，且字符串中仅含小写字母.可以考虑枚举 $S$ 的所有子串并进行判断.
int n, ans; string A[], S; int m = S.size(); for(int l = 0; l &amp;lt; m; l ++) { for(int r = l + 1; r &amp;lt; m; r ++) { string substr = S.substr(l, r - l + 1); // substr = S[l...r] for(int i = 1; i &amp;lt;= n; i ++) { if(substr == A[i]) { ans ++; } } } } cout &amp;lt;&amp;lt; ans; 暴力算法（$\textcolor{red}{×}$） AC 自动机（$\textcolor{green}{√}$） $O(n^3)$ $O(n+m)$ 原理#Under Construction .</description>
    </item>
    
    <item>
      <title>KMP 算法</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/kmp-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/kmp-%E7%AE%97%E6%B3%95/</guid>
      <description>简介#KMP 算法不是看毛片算法，而是一种字符串匹配算法. KMP 是此算法的发明者 Kruth，Morris 和 Pratt 的名字缩写.
问题#给定字符串 $A$（长度为 $m$）和 $B$（长度为 $n$），问 $A$ 中是否包含 $B$ ？
$$\begin{aligned}A&amp;amp;=a \ b \ a \ b \ a \ b \ a \ b \ c\\B&amp;amp;=a \ b \ a \ b \ c\end{aligned}$$
考虑暴力算法：
先将 $A$ 和 $B$ 左端对齐. 如果匹配失败，就将 $B$ 右移一位，直到匹配成功. $$\begin{aligned}A&amp;amp;=\textcolor{red}{a \ b \ a \ b \ a} \ b \ a \ b \ c\\B&amp;amp;=\textcolor{red}{a \ b \ a \ b \ c}\end{aligned}$$</description>
    </item>
    
    <item>
      <title>哈希函数</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</guid>
      <description>简介#哈希函数 $getHash()$ 能够将字符串转化成整数，并保证字符串不同，对应的整数也不同.该整数称为哈希值.这样，判断两个字符串是否相等，就只要判断它们的哈希值是否相等.
原理#假设所有字符串中只包含小写字符 $a\sim z$.以字符串 fantasy 为例：
将 $a\sim z$ 替换为数字 $1\sim 26$，得到一个数列. $$fantasy→\{6,1,14,20,1,19,25\}$$
将该数列看作一个 $27$ 进制数（逢 $27$ 进一）. $$getHash(fantasy)=6\cdot 27^6+1\cdot 27^5+14\cdot 27^4+\cdots+25\cdot 27^0$$
按此方法设计的哈希函数，可保证不同字符串的哈希值必不同.但字符串长度过长时，哈希值会超出 long long 的范围.
滚动哈希#为解决一般哈希函数适用范围有限的问题，采用滚动哈希.
选取两个合适的质数 $b$ 和 $p$，将字符串看作 $b$ 进制数（$b &amp;gt;$ 字符种数）.
$getHash(fantasy)=(6\cdot b^6+1\cdot b^5+14\cdot b^4+\cdots+25\cdot b^0)\%p$按此方法设计的哈希函数，不同字符串的哈希值相同的概率较小，且哈希值不会超出 long long 的范围.时间复杂度为 $O(n)$.
typedef long long LL; const LL b = 29, p = 10000019; LL getHash(string str) { // 返回 str 的哈希值 LL h = 0; for(int i = 0; i &amp;lt; str.</description>
    </item>
    
  </channel>
</rss>
