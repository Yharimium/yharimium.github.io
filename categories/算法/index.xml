<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Yharim Area</title>
    <link>/categories/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Yharim Area</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>换根 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%8D%A2%E6%A0%B9-dp/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%8D%A2%E6%A0%B9-dp/</guid>
      <description>简介#换根 DP 是基于 树形 DP 的更高效算法. 通常设 $f[u]$ 表示以 $u$ 为树根时的解，进而推出 $f[$其它节点$]$.
例 1#给定一棵 $n$ 个点的树，请求出一个节点，使得以其为根时，所有节点的深度之和最大（根节点的深度为 $1$）.
$d[u]$：（以 $1$ 为树根时）$u$ 的深度.
$\text{size}[u]$：（以 $1$ 为树根时）以 $u$ 为根的子树的节点数.
$f[u]$：以 $u$ 为树根时的节点深度和.
以 $1$ 为根时：
flowchart1 --&amp;gt; 2 &amp;amp; 32 --&amp;gt; 4 &amp;amp; 53 --&amp;gt; 6 &amp;amp; 7 &amp;amp; 8 以 $3$ 为根时：
flowchart3 --&amp;gt; 1 &amp;amp; 6 &amp;amp; 7 &amp;amp; 81 --&amp;gt; 2 --&amp;gt; 4 &amp;amp; 5 观察发现，原先 $3$ 的子树中（包括 $3$）节点的深度减少了 $1$，而其余节点的深度增加了 $1$.</description>
    </item>
    
    <item>
      <title>AC 自动机</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/ac-%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/ac-%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <description>简介#AC 自动机不是能自动 AC 的机器，而是一种著名的多模式串匹配算法.
问题#给定 $n$ 个模式串 $A_1\sim A_n$ 和一个长为 $m$ 的主串 $S$，问有多少个模式串在 $S$ 中出现过.
假设 $n$ 个模式串互不相同，且字符串中仅含小写字母.可以考虑枚举 $S$ 的所有子串并进行判断.
int n, ans; string A[], S; int m = S.size(); for(int l = 0; l &amp;lt; m; l ++) { for(int r = l + 1; r &amp;lt; m; r ++) { string substr = S.substr(l, r - l + 1); // substr = S[l...r] for(int i = 1; i &amp;lt;= n; i ++) { if(substr == A[i]) { ans ++; } } } } cout &amp;lt;&amp;lt; ans; 暴力算法（$\textcolor{red}{×}$） AC 自动机（$\textcolor{green}{√}$） $O(n^3)$ $O(n+m)$ 原理#Under Construction .</description>
    </item>
    
    <item>
      <title>KMP 算法</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/kmp-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/kmp-%E7%AE%97%E6%B3%95/</guid>
      <description>简介#KMP 算法不是看毛片算法，而是一种字符串匹配算法. KMP 是此算法的发明者 Kruth，Morris 和 Pratt 的名字缩写.
问题#给定字符串 $A$（长度为 $m$）和 $B$（长度为 $n$），问 $A$ 中是否包含 $B$ ？
$$\begin{aligned}A&amp;amp;=a \ b \ a \ b \ a \ b \ a \ b \ c\\B&amp;amp;=a \ b \ a \ b \ c\end{aligned}$$
考虑暴力算法：
先将 $A$ 和 $B$ 左端对齐. 如果匹配失败，就将 $B$ 右移一位，直到匹配成功. $$\begin{aligned}A&amp;amp;=\textcolor{red}{a \ b \ a \ b \ a} \ b \ a \ b \ c\\B&amp;amp;=\textcolor{red}{a \ b \ a \ b \ c}\end{aligned}$$</description>
    </item>
    
    <item>
      <title>RMQ 算法</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/rmq-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/rmq-%E7%AE%97%E6%B3%95/</guid>
      <description>简介#RMQ 是 Range Maximum/Minimum Query 的缩写，意为区间的最大（或最小）值.
问题#已知数组 $A$ 中一共有 $n$ 个元素，给出 $m$ 次询问：
给出 $l,r$，求 $A[l\cdots r]$ 中的最大值. int n, a[]; void query(int l, int r) { // 暴力算法 int ans = a[l]; for(int i = l; i &amp;lt;= r; i ++) ans = max(ans, a[i]); return ans; } 暴力算法（$\color{red}{×}$） RMQ 算法（$\color{green}{\sqrt{}}$） 预处理 $\color{green}{O(0)}$ $\color{green}{O(n\log{n})}$ 单次查询 $\color{green}{O(n)}$ $\color{green}{O(1)}$ $m$ 次询问 $\color{red}{O(mn)}$ $\color{green}{O(m)}$ 预处理#$f[i,j]$ 表示从 $A[i]$ 开始往后数 $2^j$ 个数的最大值，也就是 $\max\{A[i]\sim A[i+2^j-1]\}$.</description>
    </item>
    
    <item>
      <title>哈希函数</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</guid>
      <description>简介#哈希函数 $getHash()$ 能够将字符串转化成整数，并保证字符串不同，对应的整数也不同.该整数称为哈希值.这样，判断两个字符串是否相等，就只要判断它们的哈希值是否相等.
原理#假设所有字符串中只包含小写字符 $a\sim z$.以字符串 fantasy 为例：
将 $a\sim z$ 替换为数字 $1\sim 26$，得到一个数列. $$fantasy→\{6,1,14,20,1,19,25\}$$
将该数列看作一个 $27$ 进制数（逢 $27$ 进一）. $$getHash(fantasy)=6\cdot 27^6+1\cdot 27^5+14\cdot 27^4+\cdots+25\cdot 27^0$$
按此方法设计的哈希函数，可保证不同字符串的哈希值必不同.但字符串长度过长时，哈希值会超出 long long 的范围.
滚动哈希#为解决一般哈希函数适用范围有限的问题，采用滚动哈希.
选取两个合适的质数 $b$ 和 $p$，将字符串看作 $b$ 进制数（$b &amp;gt;$ 字符种数）.
$getHash(fantasy)=(6\cdot b^6+1\cdot b^5+14\cdot b^4+\cdots+25\cdot b^0)\%p$按此方法设计的哈希函数，不同字符串的哈希值相同的概率较小，且哈希值不会超出 long long 的范围.时间复杂度为 $O(n)$.
typedef long long LL; const LL b = 29, p = 10000019; LL getHash(string str) { // 返回 str 的哈希值 LL h = 0; for(int i = 0; i &amp;lt; str.</description>
    </item>
    
    <item>
      <title>数位 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8D-dp/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8D-dp/</guid>
      <description>简介#如何统计区间 $[l,r]$ 中有多少整数符合某条件？
暴力算法，枚举 $[l,r]$ 中的每一个整数，逐个判断是否满足条件，此方法遇大数据必 $gg$. 优雅地使用数位 DP. 问题#统计区间 $[l,r]$（$0≤l&amp;lt;r≤100$）中有多少整数符合「相邻两个数字之差 $≥2$」.
预处理#采用「试填法」：从个位填到最高位，如果第 $d$ 位填了 $i$，那么第 $d+1$ 位只能填 $[0,i-2]$ 或 $[i+2,9]$ 中的整数.
$f[i,d]$ 表示「所有最高位为 $i$ 的 $d$ 位数中，符合条件的个数」. 通过给定条件可推出：
$$ f[i,d]=\sum_{|k-i|≥2} f[k,d-1] $$
初始条件 $f[i,1]=1$ 计算顺序 $f[0→9,2→n]$ 时间复杂度 $O(10^2\log{n})$ int f[][]; for(int i = 0; i &amp;lt;= 9; i ++) f[i][1] = 1; // 初始条件 for(int d = 2; d &amp;lt;= N; d ++) // N : 位数的上限，N ≈ log(r) for(int i = 0; i &amp;lt;= 9; i ++) for(int k = 0; k &amp;lt;= 9; k ++) if(abs(k - i) &amp;gt;= 2) f[i][d] += f[k][d - 1]; 数位统计#考虑 前缀和 思想：</description>
    </item>
    
    <item>
      <title>树形 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2-dp/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2-dp/</guid>
      <description>简介#树形 DP 以树形结构为研究对象. 通常设 $f[u]$ 为树中 $u$ 号节点的值，利用树形关系推出其它节点的值. DP 过程多为 记忆化搜索.
例 1#给定一棵 $n$ 个点，$m$ 条边的树，顶点编号为 $1\sim n$，且以 $1$ 号节点为根. 以 $i$ 号节点为根的子树有几个节点？
$f[i]$：以 $i$ 号节点为根的子树的节点数.
$Son[i]$：$i$ 号节点的子节点集合.
$$f[i]=1&amp;#43;\sum_{v\in Son[i]}f[v]$$
计算顺序为 $f[$子节点$]→f[$父节点$]$. 使用记忆化搜索.
vector&amp;lt;int&amp;gt; son[]; // son[u] : 节点 u 的子节点集合 void dfs(int u) { // 求以 u 为根的子树中节点个数 f[u] = 1; for (int i = 0; i &amp;lt; son[u].size(); i ++) { int v = son[u][i]; // 节点 u 的第 i 个子节点 dfs(v); f[u] += f[v]; } } 例 2#公司有 $n$ 个人，编号为 $1\cdots n$，其中 $1$ 号员工是 boss.</description>
    </item>
    
    <item>
      <title>状压 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8B-dp/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8B-dp/</guid>
      <description>简介#在程序中，我们如何保存一面棋盘？
$$\def\arraystretch{2}\begin{array}{|c|c|c|c|}\hline\ &amp; \Large♕ &amp; \ &amp; \Large♕ \\ \hline\Large♕ &amp; \ &amp; \Large♕ &amp; \Large♕ \\ \hline\ &amp; \ &amp; \Large♕ &amp; \ \\ \hline\Large♕ &amp; \Large♕ &amp; \ &amp; \Large♕ \\ \hline\end{array}$$
用 $bool$ 数组 $A[ \ ][ \ ]$.$A[i][j]=1$ 表示第 $i$ 行第 $j$ 列有一枚棋子.
bool A[][] = { {0, 1, 0, 1}, {1, 0, 1, 1}, {0, 0, 1, 0}, {1, 1, 0, 1} }; 现在我摆出了棋盘的第 $1$ 行和第 $4$ 行，并规定任意两个棋子不能相邻，则中间两行一共有多少种可行的摆法？</description>
    </item>
    
    <item>
      <title>状态压缩</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</guid>
      <description>简介#由于 bool 变量只有 $0$ 和 $1$ 两种值，二进制位也具备此特征，故每个 bool 数组都可用一个二进制数表示.
将 bool 数组 $a$（长为 $n$）用 $n$ 位二进制数表示，它的第 $i$ 位表示 $a[i]$.
状态压缩的相关操作方法：
操作 运算 取出第 $k$ 位数 (n &amp;gt;&amp;gt; (k - 1)) &amp;amp; 1 将第 $k$ 位取反 n ^= (1 &amp;lt;&amp;lt; (k - 1)) 将第 $k$ 位赋值为 $1$ n |= (1 &amp;lt;&amp;lt; (k - 1)) 将第 $k$ 位赋值为 $0$ n &amp;amp;= ~ (1 &amp;lt;&amp;lt; (k - 1)) lowbit 运算#$lowbit(n)$：$n$ 在二进制下「最低位的 $1$ 和其后所有的 $0$」构成的数.</description>
    </item>
    
    <item>
      <title>区间 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4-dp/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4-dp/</guid>
      <description>简介#区间 DP 以区间为研究对象. 通常设 $f[l,r]$ 为区间 $[l,r]$ 的值，用 $f[小区间]$ 的值推出 $f[大区间]$ 的值.
问题#$n$ 堆石子排成一列，第 $i$ 堆石子重量为 $A_i$. 每次合并相邻两堆石子，消耗的体力值为其重量和. 求将所有石子合并为一堆，最少消耗多少体力.
原理#$f[l,r]$：合并第 $l$ 堆至第 $r$ 堆石子的最少体力值.
合并第 $l\sim r$ 堆石子可分为三步（设 $k$ 为 $[l, r)$ 中的某个数）：
合并第 $l\sim k$ 堆石子，消耗体力值 $f[l,k]$.
合并第 $k+1\sim r$ 堆石子，消耗体力值为$f[k+1,r]$.
合并剩下两堆石子，消耗体力值 $\displaystyle\sum_{i=l}^r A_i$.
枚举 $k$，找出最小的体力值.
$$f[l,r]=\min_{l≤k&amp;lt; r}\{f[l,k]&amp;#43;f[k&amp;#43;1,r]\}&amp;#43;\sum_{i=l}^r A_i$$
其中 $\displaystyle\sum_{i=l}^r A_i$ 可以用 前缀和 优化.
计算顺序为 $f[小区间]\rightarrow f[大区间]$，故枚举区间长度的循环在最外层.
时间复杂度为 $O(n^3)$
memset(f, 0x7f, sizeof f); for (int i = 1; i &amp;lt;= n; i ++) { f[i][i] = 0; sum[i] = sum[i - 1] + a[i]; } for (int len = 2; len &amp;lt;= n; len ++) { // 区间长度 for (int l = 1; l + len - 1 &amp;lt;= n; l ++) { // 枚举区间左端点 int r = l + len - 1; // 区间右端点 for (int k = l; k &amp;lt; r; k ++) f[l][r] = min(f[l][r], f[l][k] + f[k + 1][r]); f[l][r] += sum[r] - sum[l - 1]; } } </description>
    </item>
    
    <item>
      <title>记忆化搜索</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</guid>
      <description>求 Fibonacci 第 $i$ 项的深搜程序如下：
int f(int x) { if (x &amp;lt;= 2) return 1; return f(x - 1) + f(x - 2); } 该程序直观，但运行效率低. 以 $f(7)$ 为例，列出函数调用情况：
随着 $n$ 的增大，$f(n)$ 的时间复杂度呈指数级增长. 我们发现，有很多函数被重复调用. 使用「记忆化搜索」可避免此情况.
建立数组 $F$ 保存计算结果.
若 $f(x)$ 未被调用过，算出 $f(x)$ 的值，并存入 $F[ x]$ 若 $f(x)$ 已被调用过，直接返回 $F[ x]$ int F[]; F[1] = F[2] = 1; int f(int x) { if (F[x] != 0) // 若 F[x] 有值，则说明 f(x) 被调用过 return F[x]; return F[x] = f(x - 1) + f(x - 2); // 返回时保存 } 记忆化搜索的时间复杂度与动态规划相当，但效率略低.</description>
    </item>
    
    <item>
      <title>高精度</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <description>简介#高精度是支持高位数的运算系统. 本章仅介绍最常用的正整数运算系统.
构造#在 vector&amp;lt;int&amp;gt; 容器内保存每位数字，并实现自动处理进位.
vector&amp;lt;int&amp;gt; 的位数要从 $0$ 记起（第 $0$ 位，第 $1$ 位，$\cdots$）.
struct Wint:vector&amp;lt;int&amp;gt; { // 以 vector 为基类 Wint(int n = 0) { // 初始化为 0 push_back(n); upgrade(); } Wint&amp;amp; upgrade() { // 处理进位 while (!empty() &amp;amp;&amp;amp; !back()) pop_back(); // 去除最高位多余的 0 if (empty()) return *this; for (int i = 1; i &amp;lt; size(); i ++) { // 满 10 进 1 (*this)[i] += (*this)[i - 1] / 10; (*this)[i - 1] %= 10; } while (back() &amp;gt;= 10) { // 最高位 &amp;gt;= 10 时，新增一位 push_back(back() / 10); (*this)[size() - 2] %= 10; } return *this; } }; 输入#取出字符串的每一位，倒序存入数组.</description>
    </item>
    
    <item>
      <title>背包问题</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85-dp/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85-dp/</guid>
      <description>01 背包#给定 $n$ 个物品，第 $i$ 个物品体积为 $c[i]$, 价值为 $w[i]$. 现有容积为 $m$ 的背包，求将物品装入背包得到的最大价值.
$f[i,v]$: 从前 $i$ 个物品中，选出总体积为 $v$ 的物品，能得到的最大价值.
不选第 $i$ 个物品：$f[i,v]=f[i-1,v]$. 选第 $i$ 个物品：$f[i,v]=f[i-1,v-w_i]+c_i$. $$f[i,v] = \max\left\{\begin{aligned}&amp;amp;f[i-1,v]\\&amp;amp;f[i-1,v-w_i]&amp;#43;c_i\quad(v≥w_i)\\\end{aligned}\right.$$
时间复杂度：$O(nm)$.
for (int i = 1; i &amp;lt;= n; i ++) { for (int v = 0; v &amp;lt;= m; v ++) { f[i][v] = f[i - 1][v]; if (v &amp;gt;= w[i]) f[i][v] = max(f[i][v], f[i - 1][v - w[i]] + c[i]); } } // 问题的解是 f[n][m] 空间优化#实际上，状态转移方程 的第一维可以去掉，即让新状态覆盖旧状态，以降低空间开销.</description>
    </item>
    
    <item>
      <title>基础 DP</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%9F%BA%E7%A1%80-dp/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%9F%BA%E7%A1%80-dp/</guid>
      <description>斐波那契数列#斐波那契数列是形如 $\{1,1,2,3,5,8,\cdots\}$ 的数列. 求数列的第 $n$ 项.
??? note 分析 $f[n]$：数列的第 $n$ 项.
``` latexf[n]=\begin{cases}1&amp;amp;n=1,2\\f[n-1]+f[n-2]&amp;amp;n\geq 3\end{cases}`````` cppint f[];f[1] = f[2] = 1;for (int i = 3; i &amp;lt;= n; i ++)f[i] = f[i - 1] + f[i - 2];```汉诺塔问题#汉诺塔由 $n$ 个不同的盘子和 $3$ 根杆子组成. 初始时，$n$ 个盘子从小到大叠在 $a$ 杆上：
现在，按以下规则将 $n$ 个盘子从 $a$ 杆移到 $c$ 杆.</description>
    </item>
    
    <item>
      <title>动态规划（DP）</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>简介#动态规划（DP）是打表的最高境界. 我们从一个案例入手 DP.
案例#斐波那契数列形如 $\{1,1,2,3,5,8,\cdots\}$. 计算此数列的第 $n$ 项 $f[n]$.
根据数列特征，列出递推公式
$$f[n]=\begin{cases}1&amp;amp;n=1,2\\f[n-1]&amp;#43;f[n-2]&amp;amp;n\geq 3\end{cases}$$
首先，将 $f[1]=1,f[2]=1$ 填入表.
$f[1]$ $f[2]$ $1$ $1$ 计算 $f[3]=f[2]+f[1]$ 并填入表.
$f[1]$ $f[2]$ $\color{red}{f[3]}$ $1$ $1$ $\color{red}{2}$ 计算 $f[4]=f[3]+f[2]$ 并填入表.
$f[1]$ $f[2]$ $f[3]$ $\color{red}{f[4]}$ $1$ $1$ $2$ $\color{red}{3}$ 重复计算填表的步骤，直到得到 $f[n]$.
$f[1]$ $f[2]$ $f[3]$ $f[4]$ $f[5]$ $f[6]$ $f[7]$ $\cdots$ $f[n]$ $1$ $1$ $2$ $3$ $5$ $8$ $13$ $\cdots$ 时间复杂度：$O(n)$.
f[1] = f[2] = 1; for (int i = 3; i &amp;lt;= n; i ++) f[i] = f[i - 1] + f[i - 2]; 步骤#为问题设计 状态.</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/</guid>
      <description>简介#搜索算法：枚举问题的所有可能答案，并逐一校验.
案例#设集合 $A$ 满足以下性质：
若 $x\in A$，则 $2x$ 和 $3x-1$ 必属于 $A$. 已知 $3\in A$，问 $23$ 是否属于 $A$？
$A$ 的性质可抽象为下图：
$$\xymatrix@C=0em{&amp;amp; x \ar[dl]\ar[dr] &amp;amp;\\\margin 2x \margin &amp;amp; &amp;amp; 3x-1}$$
以 $3$ 为树根，向下拓展树形图. 于是只需搜索 $23$ 是否在树中.
$$\xymatrix@C=0em{&amp;amp;&amp;amp;&amp;amp;3\ar[dll]\ar[drr]\\&amp;amp;6\ar[dl]\ar[dr]&amp;amp;&amp;amp;&amp;amp;&amp;amp;8\ar[dl]\ar[dr]\\12&amp;amp;&amp;amp;17&amp;amp;&amp;amp;16&amp;amp;&amp;amp;23}$$
对于复杂的问题，可以先抽象出关系图，再搜索求解.
广度优先搜索（BFS）#广度优先搜索（Breadth First Search，BFS）按层次搜索节点. 其原理如下：
建立空队列. 将根节点入队. 取出队头，将其所有子节点入队. 重复上一步直到队列为空. BFS 搜索该图的步骤：
节点 $1$ 入队 节点 $1$ 出队，$2,3$ 入队 节点 $2$ 出队，$4,5$ 入队 节点 $3$ 出队，$6,7$ 入队 节点 $4$ 出队 节点 $5$ 出队 节点 $6$ 出队 节点 $7$ 出队 $$\xymatrix@C=0.</description>
    </item>
    
    <item>
      <title>二分</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</guid>
      <description>简介#玩个游戏.
想一个 $1000$ 以内的正整数 $n$. 每次我给出一个整数 $x$，告诉我「$n&amp;gt;x$」「$n&amp;lt;x$」或「$n=x$」. 我能保证在 $10$ 次以内猜到它.
首先我猜 $x=500$. 除了正好猜中以外，我能把 $n$ 的范围缩小一半.
$n&amp;gt;x\intro n\in[501,1000]$ $n&amp;lt;x\intro n\in[1,499]$ 然后如法炮制，重复给出可行范围的中间数，每次都能把范围折半. 由于 $\log_2{1000}&amp;lt;10$，最多 $10$ 次就能确定 $n$.
例 $n=324$：
$x=500$. $n&amp;lt;x\intro n\in[1,499]$. $x=250$. $n&amp;gt;x\intro n\in[251,499]$. $x=375$. $n&amp;lt;x\intro n\in[251,375]$. $x=313$. $n&amp;gt;x\intro n\in[313,375]$. $x=344$. $n&amp;lt;x\intro n\in[313,344]$. $x=328$. $n&amp;lt;x\intro n\in[313,328]$. $x=320$. $n&amp;gt;x\intro n\in[320,328]$. $x=324$. $n=x$. 条件#数组须呈现广义上的「单调性」.
将数组 $a$ 对半分，前段都不满足 $P$，后段都满足 $P$，则可用二分算法确定分割点，进而确定「第一个满足 $P$ 的元素」.
原理#查找数组 $a$（长度 $n$）中第一个满足条件 $P$ 的元素：</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</guid>
      <description>简介#排序数组 $a$（长度 $n$）中的元素. 本章只研究升序排序.
选择排序#在第 $i$ 次遍历中，交换 $a[i]$ 和第 $i$ 小的数.
时间复杂度：$O(n^2)$.
for (int i = 1; i &amp;lt;= n; i ++) { int tmp = i; // tmp: 第 i 小的数 for (int j = i + 1; j &amp;lt;= n; j ++) if (a[j] &amp;lt; a[tmp]) tmp = j; swap(a[i], a[tmp]); } 冒泡排序#重复扫描数组 $a$. 若 $a[i]&amp;gt;a[i+1]$ 就交换它们. 当没有可交换元素时结束排序.
时间复杂度：$O(n^2)$.
while (true) { bool swapped = false; for (int i = 1; i &amp;lt;= n; i ++) { if (a[i] &amp;gt; a[i + 1]) { swap(a[i], a[i + 1]); swapped = true; } } if (!</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/</guid>
      <description>递归的定义：参见 递归.
简介#你去找银行经理办事.
经理 A：不关我的事. 找经理 B.
经理 B：不关我的事. 找经理 A.
于是你在两个经理之间往返了一整天. 在程序中，该行为称作「递归」.
直接递归#函数 f() 在内部调用了自己.
void f() { /* Do something */ f(); } 这和以下死循环等价.
while (true) { /* Do something */ } 间接递归#这类似于两个银行经理的情况.
void A() { B(); } void B() { A(); } 边界条件#合法的递归需要边界条件，使函数在恰当的时机停止.
void f() { if (.../* 边界条件 */) return; /* Do something */ f(); } 这和以下循环等价.</description>
    </item>
    
  </channel>
</rss>
