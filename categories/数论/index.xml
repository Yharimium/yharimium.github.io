<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数论 on Yharim Area</title>
    <link>/categories/%E6%95%B0%E8%AE%BA/</link>
    <description>Recent content in 数论 on Yharim Area</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E6%95%B0%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>矩阵快速幂</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>简介#矩阵快速幂能将 $O(n)$ 的线性递推优化成 $O(\log n)$.
矩阵#矩阵相当于二维数组.
矩阵 $A$ 有 $m$ 行 $n$ 列，称为 $m×n$ 矩阵，简记为 $A_{mn}$.
矩阵 $A$ 第 $i$ 行 $j$ 列的元素写作 $a_{ij}$.
$$A=\begin{bmatrix}a_{11}&amp;amp; a_{12}&amp;amp; \cdots &amp;amp; a_{1n}\\a_{21}&amp;amp; a_{22}&amp;amp; \cdots &amp;amp; a_{2n}\\\vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\a_{m1}&amp;amp; a_{m2}&amp;amp; \cdots &amp;amp; a_{mn}\end{bmatrix}$$
单位矩阵#主对角线上的元素都为 $1$，其余元素为 $0$ 的 $n×n$ 矩阵称为 $n$ 阶单位矩阵，记作 $I_n$ 或 $E_n$.
$$I_n=\begin{bmatrix}1 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \\0 &amp;amp; 1 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 0 \\0 &amp;amp; 0 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 0 \\\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\0 &amp;amp; 0 &amp;amp; 0 &amp;amp; \cdots &amp;amp; 1\end{bmatrix}$$</description>
    </item>
    
    <item>
      <title>莫比乌斯反演</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</guid>
      <description>!!! info 若无特殊说明，本章涉及的变量皆为正整数.
简介#由函数 $f$ 定义一个函数 $g$：
$$g(n)=\sum_{d\mid n}f(d)\quad\big(\text{或}\quad g(n)=\sum_{n\mid d}f(d)\big)$$
已知 $g(n)$，即可用莫比乌斯反演推出 $f(n)$.
莫比乌斯函数#定义#$n$ 的莫比乌斯函数记为 $\mu(n)$：
$$\mu(n)=\begin{cases}0 &amp;amp; n \ 有平方因数 \\1 &amp;amp; n \ 无平方因数，且有偶数个质因数 \\-1 &amp;amp; n \ 无平方因数，且有奇数个质因数\end{cases}$$
特别地，$μ(1)=1$.
性质#性质 1#$$\sum_{d\mid n}μ(d)= \left\lfloor\frac{1}{n}\right\rfloor= \begin{cases}1 &amp;amp; n=1\\0 &amp;amp; n&amp;gt;1\end{cases}$$
证 设 $n$ 有 $k$ 个质因子 $p_1,p_2,\cdots,p_k$，则：
$$\begin{aligned}\sum_{d\mid n}μ(d)= \ &amp;amp;μ(1)&amp;#43;μ(p_1)&amp;#43;μ(p_2)&amp;#43;\cdots&amp;#43;μ(p_k)&amp;#43;μ(p_1p_2)&amp;#43;\cdots&amp;#43;μ(p_1p_2\cdots p_k)\\= \ &amp;amp;{k\choose 0}&amp;#43;{k\choose 1}(-1)&amp;#43;{k\choose 2}(-1)^2&amp;#43;\cdots&amp;#43;{k\choose k}(-1)^k\\= \ &amp;amp;\sum_{i=0}^k{k\choose i}(-1)^i\end{aligned}$$</description>
    </item>
    
    <item>
      <title>博弈论</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%8D%9A%E5%BC%88%E8%AE%BA/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%8D%9A%E5%BC%88%E8%AE%BA/</guid>
      <description>简介#博弈论研究在一局博弈中如何最优化玩家的策略.
公平组合游戏 ICG#两名玩家轮流行动，且行动规则相同. 最终不能行动的玩家判负. NIM 游戏#简介#有 $n$ 堆石子，第 $i$ 堆石子数为 $A_i$. 两名玩家轮流取走任意一堆的任意个石子，但不能不取. 取走最后一个石子的玩家胜.
NIM 游戏属于 公平组合游戏，且不存在平局，只有「先手必胜」和「后手必胜」两种情况.
策略#当且仅当 $A_1\oplus A_2\oplus\cdots\oplus A_n\not=0$ 时，先手必胜（$\oplus$ 表示二进制异或）.
$A\oplus B$：将 $A$ 和 $B$ 的二进制位对齐，相等取 $0$，不相等取 $1$.
$$\begin{aligned}1 \ 0 \ 0 \ 1 \ 0 \ 1 \ 0\\\underline{\oplus \ 1 \ 1 \ 0 \ 1 \ 1 \ 0 \ 1}\\0 \ 1 \ 0 \ 0 \ 1 \ 1 \ 1\end{aligned}$$</description>
    </item>
    
    <item>
      <title>容斥原理</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/</guid>
      <description>!!! info 若无特殊说明，本章涉及的变量皆为正整数.
简介#容斥原理是一种不重不漏的计数原理.
例，$A,B,C$ 三人竞选扫黄队长：
::: - $15$ 人投给 $A$ - $16$ 人投给 $B$ - $17$ 人投给 $C$ - $2$ 人同时投给 $A,B,C$ ::: - $4$ 人同时投给 $A,B$ - $5$ 人同时投给 $A,C$ - $6$ 人同时投给 $B,C$
问共有多少人参与投票.
$A,B,C$ 三人的得票情况以用韦恩图描述：
::: - $|A|=15$ - $|B|=16$ - $|C|=17$ - $|A∩B∩C|=2$ ::: - $|A∩B|=4$ - $|A∩C|=5$ - $|B∩C|=6$
求的是投票人数，即 $|A∪B∪C|$.
$$|A∪B∪C|=|A|+|B|+|C|-|A∩B|-|A∩C|-|B∩C|+|A∩B∩C|$$
将上述问题推广到普遍情况，就是容斥原理.
公式#并集#对于 $n$ 个集合 $S_1,S_2\cdots S_n$，$|S|$ 表示集合 $S$ 的元素数，则：</description>
    </item>
    
    <item>
      <title>中国剩余定理</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</guid>
      <description>若无特殊说明，本章涉及的变量皆为正整数.
简介#中国剩余定理最早发现于《孙子算经》中.
有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二. 问物几何？
即求满足下列条件的 $x$：
$$\left\{\begin{aligned}x \bmod 3 = 2 \\x \bmod 5 = 3 \\x \bmod 7 = 2 \\\end{aligned}\right.$$
它的通解公式为 $x=233+105k$.
《孙子算经》中只给出了最小正整数解，也就是 $k=-2$ 时的解：$x=23$.
不过，今天我们只关心中国剩余定理更普遍的应用.
问题#中国剩余定理指关于 $x$ 的同余方程组的解法：
$$\left\{\begin{aligned}x&amp;amp;≡a_1 \ (\bmod \ m_1)\\x&amp;amp;≡a_2 \ (\bmod \ m_2)\\&amp;amp;\cdots\\x&amp;amp;≡a_k \ (\bmod \ m_k)\end{aligned}\right.$$
其中 $a_1, a_2, \cdots, a_k$ 两两互质.
解法#设 $M=\prod^k_{i=1}m_i$.
设 $ M_i=\frac{M}{m_i}$，即除 $m_i$ 外，其余所有 $m$ 的乘积.</description>
    </item>
    
    <item>
      <title>Lucas 定理</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/lucas-%E5%AE%9A%E7%90%86/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/lucas-%E5%AE%9A%E7%90%86/</guid>
      <description>若无特殊说明，本章涉及的变量皆为正整数.
简介#Lucas 定理用于求解大组合数对质数 $p$（$p≤10^6$）取模：
$${n\choose m}≡{n \bmod p\choose m \bmod p}\cdot{\lfloor n/p\rfloor\choose\lfloor m/p\rfloor} \ (\bmod \ p)$$
证明#我不会，长大后再学习.
解法#对于 $n,m≤10^6$ 的组合数 ${n\choose m}$，可以直接代入 公式，并使用 乘法逆元 将除法转为乘法.
$$\binom{n}{m}=\frac{n!}{m!(n-m)!}≡n!\cdot(m!)^{-1}\cdot[(n-m)!]^{-1} \ (\bmod \ p)$$
/* fac[x]: x! * inv[x]: x! 关于模 p 的乘法逆元（注意有阶乘） * 以上需要预处理 */ LL C(LL n, LL m) { if (n &amp;lt; m) return 0; return fac[n] * inv[m] % P * inv[n - m] % P; } 对于更大的组合数，套用 Lucas 定理.</description>
    </item>
    
    <item>
      <title>卡特兰数列</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E5%88%97/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0%E5%88%97/</guid>
      <description> 若无特殊说明，本章涉及的变量皆为正整数.
简介#卡特兰数列是许多看似毫不相关的问题的解.
$n$ 个节点能构成 $Cat_n$ 种不同的二叉树. $n$ 个左括号和 $n$ 个右括号组成的合法序列有 $Cat_n$ 种. $n$ 个元素的进栈顺序为 $1,2,\cdots,n$，合法的出栈顺序有 $Cat_n$ 种. 在圆上选择 $2n$ 个点成对连接，使得 $n$ 条线段不相交的方法数为 $Cat_n$. 通过若干条互不相交的对角线,把凸 $n$ 边形拆分成若干个三角形的方案数为 $Cat_{n-2}$. 在平面直角坐标系上，每一步只能向上或向右走 $1$ 个单位，从 $(0,0)$ 走到 $(n,n)$ 且不接触直线 $y=x$ 的路径数量为 $2Cat_n-1$. 通项公式#$$Cat_n={2n\choose n}÷(n+1)={2n\choose n}-{2n\choose n-1}$$
递推公式#$$Cat_n=\sum_{i=0}^{n-1}Cat_i\cdot Cat_{n-i+1}$$
附表#$Cat_0$ $Cat_1$ $Cat_2$ $Cat_3$ $Cat_4$ $Cat_5$ $Cat_6$ $Cat_7$ $Cat_8$ $\cdots$ $1 $ $1 $ $2 $ $5 $ $14 $ $42 $ $132 $ $429 $ $1430 $ $\cdots$ </description>
    </item>
    
    <item>
      <title>二项式定理</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/</link>
      <pubDate>Sun, 22 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
简介#$$(a+b)^n=\sum_{i=0}^n\binom{n}{i}a^{n-i}b^i$$
证明#使用数学归纳法.
设 $n=k$ 时二项式定理成立，考察 $n=k+1$ 时是否也成立：
$$\begin{aligned}&amp;amp;\textcolor{transparent}{=}(a&amp;#43;b)^{k&amp;#43;1}\\&amp;amp;=(a&amp;#43;b)\cdot(a&amp;#43;b)^k\\&amp;amp;=a(a&amp;#43;b)^k&amp;#43;b(a&amp;#43;b)^k\\&amp;amp;=a\sum_{i=0}^k\binom{k}{i}a^{k-i}b^i&amp;#43;b\sum_{j=0}^k\binom{k}{j}a^{k-j}b^j\\&amp;amp;=\sum_{i=0}^k\binom{k}{i}a^{k-i&amp;#43;1}b^i&amp;#43;\sum_{j=0}^k\binom{k}{j}a^{k-j}b^{j&amp;#43;1}&amp;amp;&amp;amp;将 \ a,b \ 乘进去\\&amp;amp;=a^{k&amp;#43;1}&amp;#43;\sum_{i=1}^k\binom{k}{i}a^{k-i&amp;#43;1}b^i&amp;#43;\sum_{j=0}^k\binom{k}{j}a^{k-j}b^{j&amp;#43;1}&amp;amp;&amp;amp;提出 \ i=0 \ 的项\\&amp;amp;=a^{k&amp;#43;1}&amp;#43;\sum_{i=1}^k\binom{k}{i}a^{k-i&amp;#43;1}b^i&amp;#43;\sum_{λ=1}^{k&amp;#43;1}\binom{k}{λ-1}a^{k-λ&amp;#43;1}b^λ&amp;amp;&amp;amp;设 \ λ=j&amp;#43;1，代入\\&amp;amp;=a^{k&amp;#43;1}&amp;#43;\sum_{i=1}^k\binom{k}{i}a^{k-i&amp;#43;1}b^i&amp;#43;b^{k&amp;#43;1}&amp;#43;\sum_{λ=1}^{k}\binom{k}{λ-1}a^{k-λ&amp;#43;1}b^λ&amp;amp;&amp;amp;提出 \ λ=k&amp;#43;1 \ 的项\\&amp;amp;=a^{k&amp;#43;1}&amp;#43;b^{k&amp;#43;1}&amp;#43;\sum_{i=1}^k\binom{k&amp;#43;1}{i}a^{k&amp;#43;1-i}b^i&amp;amp;&amp;amp;套用 \ 帕斯卡法则\\&amp;amp;=\sum_{i=0}^{k&amp;#43;1}\binom{k&amp;#43;1}{i}a^{k&amp;#43;1-i}b^i\\\end{aligned}$$
∴ 二项式定理满足递推成立关系：
$n=k$ 时成立 $\Longrightarrow$ $n=k+1$ 时成立∵ $n=1$ 时 $(a+b)^1=\sum_{i=0}^1\binom{n}{i}a^{n-i}b^i=a+b$ 成立，
∴ 二项式定理在 $n=1$ 之后的任何整数都成立.</description>
    </item>
    
    <item>
      <title>组合数学</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
简介#排列：从 $n$ 个元素中取出 $m$ 个，按一定顺序排列.
组合：从 $n$ 个元素中取出 $m$ 个，不计排列顺序.
加法原理#一算法有 $n$ 种方式，第 $i$ 种方式有 $a_i$ 种方法，该算法共有 $\sum_{i=1}^na_i$ 种实现方法.
例 从 $A$ 地到 $B$ 地有爬行、骑车、飞行三种方式，可以任选一个. 而爬行、骑车、飞行分别有 $a_1,a_2,a_3$ 种方法，那么 $A→B$ 共有 $a_1+a_2+a_3$ 种方法. 乘法原理#一算法有 $n$ 个步骤，第 $i$ 个步骤有 $a_i$ 种方法，该算法共有 $\prod_{i=1}^na_i$ 种实现方法.
例 从 $A$ 地到 $B$ 地必须先爬行到车站，再骑车到机场，最后飞行到北京，而爬行、骑车、飞行分别有 $a_1,a_2,a_3$ 种方法，那么 $A→B$ 共有 $a_1\cdot a_2\cdot a_3$ 种方法. 排列数#从 $n$ 个元素中取出 $m$ 个，按一定顺序排列的方案数，用符号 $A_n^m$ 表示.</description>
    </item>
    
    <item>
      <title>欧拉函数</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
定义#$n$ 的欧拉函数为 $[1,n]$ 中与 $n$ 互质的数的个数，记为 $\varphi(n)$. 特别地，$\varphi(1)=1$.
性质#质数的欧拉函数#$p$ 为质数，则 $\varphi(p)=p-1$.
证 $p$ 与 $[1,p-1]$ 中的每个数互质. $p^k$ 的欧拉函数#$p$ 为质数，$n=p^k$，则 $\varphi(n)=p^k-p^{k-1}$.
证 在 $[1,n]$ 中，只有 $p$ 的倍数不与 $n=p^k$ 互质.
$∵\;[1,n]$ 中 $p$ 的倍数有 $\dfrac{n}{p}=\dfrac{p^k}{p}=p^{k-1}$ 个，
$∴\varphi(n)=n-p^{k-1}=p^k-p^{k-1}$.
通项公式#$n$ 有 $m$ 个质因子 $p_1∼p_m$，则 $\varphi(n)=n\prod_{i=1}^{m}(1-\frac{1}{p_i})$.
证 若 $n$ 有质因子 $p$，则 $p$ 的倍数不与 $n$ 互质.
$[1,n]$ 中 $p$ 的倍数有 $\cfrac{n}{p}$ 个，则剩下的 $n-\cfrac{n}{p}=n\cdot(1-\cfrac{1}{p})$ 个数不是 $p$ 的倍数.</description>
    </item>
    
    <item>
      <title>乘法逆元</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
定义#若 $a\cdot b≡1\pmod{p}$，则 $b$ 为 $a$ 在模 $p$ 意义下的逆元，记作 $a^{-1}$ 或 $inv(a)$.
$$a·a^{-1}≡1 \ (\bmod \ p)$$
乘法逆元能够很好地将模运算中的除法转为乘法：
$$\dfrac{a}{b}≡a\cdot b^{-1} \ (\bmod \ p)$$
在模运算中，$a^{-1}$ 是整数，并不是 $a$ 的 $-1$ 次方.
解法#对于整数 $x$，可以求解关于 $x^{-1}$ 的 线性同余方程 $x\cdot x^{-1}≡1 \ (\bmod \ p)$，其中 $x$ 为已知常数.
int exGcd(int a, int b, int&amp;amp; x, int&amp;amp; y) { if(b == 0) { x = 1, y = 0; return a; } int d = exGcd(b, a % b, x, y); int t = x; x = y, y = t - a / b * y; return d; } int liEu(int a, int b, int c) { // a·x ≡ c (mod b) int x, y, d = exGcd(a, b, x, y); x *= (c / d); int t = b / d; return (x % t + t) % t; } int inv(int x, int m) { return liEu(x, m, 1); } 质数的逆元#当 $p$ 为质数时，由 费马小定理 得：</description>
    </item>
    
    <item>
      <title>线性同余方程</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
简介#形如 $ax≡c\pmod{b}$ 的方程称为线性同余方程.
特殊解#$ax≡c\pmod{b}\eq ax+by=c$. 由 裴蜀定理 可知，当且仅当 $gcd(a,b)\mid c$ 时有整数解.
先用 扩展欧几里得算法 求出一组 $x_0,y_0$，使得：
$$ax_0+by_0=gcd(a,b)$$
两边同时乘 $\frac{c}{gcd(a,b)}$：
$$a\frac{c}{gcd(a,b)}x_0+b\frac{c}{gcd(a,b)}y_0=c$$
于是找到方程 $ax+by=c$ 的一组特殊解：
$$\left\{\begin{aligned}x=\frac{c}{gcd(a,b)}x_0\\y=\frac{c}{gcd(a,b)}y_0\end{aligned}\right.$$
通解#若 $x_0,y_0$ 为方程 $ax+by=c$ 的一组解，则该方程的任意解可表示为：
$$\left\{\begin{aligned}x=x_0&amp;#43;bt\\y=y_0-at\end{aligned}\right.$$
在实际问题中，往往只需要最小正整数解：
$$x=(x_0 \bmod t&amp;#43;t) \bmod t, \ t=\frac{b}{gcd(a,b)}$$
模板#int exGcd(int a, int b, int&amp;amp; x, int&amp;amp; y) { if (b == 0) { x = 1, y = 0; return a; } int d = exGcd(b, a % b, x, y); int t = x; x = y, y = t - a / b * y; return d; } int liEu(int a, int b, int c) { // ax ≡ c (mod b) int x, y, d = exGcd(a, b, x, y); if (c % d !</description>
    </item>
    
    <item>
      <title>欧几里得算法</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</guid>
      <description>最大公因数#$a$ 和 $b$ 的最大公因数记作 $gcd(a,b)$，简记为 $(a,b)$.
若 $a,b$ 有公因数 $d$，则 $a \bmod b = a - b \cdot\left\lfloor\frac{a}{b}\right\rfloor$ 也有因数 $d$. 也就是说，$a$ 和 $b$ 的所有公因数，同时也是 $b$ 和 $a \bmod b$ 的公因数，因此它们的最大公因数也相等.
$$gcd(a,b)=gcd(b,a \bmod b)$$
递归到 $b=0$ 时，$a$ 即为 $gcd(a,b)$.
时间复杂度为 $O(log{(a+b)})$.
int gcd(int a, int b) { if (b == 0) return a; return gcd(b, a % b); } 最小公倍数#$a$ 和 $b$ 的最小公倍数记作 $lcm(a,b)$，简记为 $[a,b]$.
设 $gcd(a,b)=d$，则 $a=k_1d,b=k_2d$，所以：</description>
    </item>
    
    <item>
      <title>贝祖定理</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E8%B4%9D%E7%A5%96%E5%AE%9A%E7%90%86/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E8%B4%9D%E7%A5%96%E5%AE%9A%E7%90%86/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
简介#对于任意 $a,b$，$ax+by=c\eq gcd(a,b)\mid c$.
证明#设 $gcd(a,b)=d$，则：
$$\left\{\begin{aligned}&amp;amp;d\mid a\\&amp;amp;d\mid b\end{aligned}\right.\eq\left\{\begin{aligned}&amp;amp;d\mid ax\\&amp;amp;d\mid by\end{aligned}\right.\eqd\mid (ax&amp;#43;by)\eqd\mid c$$
即 $gcd(a,b)\mid c$.</description>
    </item>
    
    <item>
      <title>快速幂</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>快速幂#如何快速求 $a^b$（$a,b\in\mathbb{Z}$）？
递归写法#根据乘方公式 $a^{m+n}=a^m\cdot a^n$，有：
$$a^b=\left\{\begin{aligned}&amp;amp;a^{\left\lfloor b/2\right\rfloor}\cdot a^{\left\lfloor b/2\right\rfloor} &amp;amp;&amp;amp; b=2k\\&amp;amp;a^{\left\lfloor b/2\right\rfloor}\cdot a^{\left\lfloor b/2\right\rfloor}\cdot a &amp;amp;&amp;amp; b=2k&amp;#43;1\end{aligned}\right.,k\in\mathbb{Z}$$
边界条件 时间复杂度 $a^0=1$ $O(\log{b})$ typedef long long LL; LL Pow(LL a, LL b) { if(!b) return 1; // 边界条件 LL res = Pow(a, b / 2); if(b % 2 == 0) // b 是偶数 return res * res; else // b 是奇数 return res * res * a; } 递推写法#若 $b$ 在二进制下的第 $k_1,k_2,k_3,\cdots$ 位为 $1$，则 $b=2^{k_1}+2^{k_2}+2^{k_3}+\cdots(k_i≤\log{b})$.</description>
    </item>
    
    <item>
      <title>同余</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E5%90%8C%E4%BD%99/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%90%8C%E4%BD%99/%E5%90%8C%E4%BD%99/</guid>
      <description>注意：若无特殊说明，本章涉及的变量皆为正整数.
定义#若 $a \bmod m=b \bmod m$，则 $a$ 和 $b$ 模 $m$ 同余，记作 $a≡b\pmod{m}$.
$$a≡b \ (\bmod \ m)\eq a=b+km\eq m\mid(a-b)$$
性质#自反性：$a≡a\pmod{m}$.
对称性：$a≡b\pmod{m}\eq b≡a\pmod{m}$.
传递性：$\left\{\begin{aligned}a&amp;amp;≡b \ (\bmod \ m)\\b&amp;amp;≡c \ (\bmod \ m)\end{aligned}\right.\eq a≡c\pmod{m}$.
同加性：$a≡b\pmod{m}\eq a+c≡b+c\pmod{m}$.
同乘性：$a≡b\pmod{m}\eq ac≡bc\pmod{m}$.
同幂性：$a≡b\pmod{m}\eq a^n≡b^n\pmod{m}$.
同余不满足同除性. 当 $a≡b \ (\bmod \ m)$ 时不一定有 $\frac{a}{n}≡\frac{b}{n} \ (\bmod \ m)$.
同余类#集合 $A$ 是模 $m$ 的同余类，当且仅当：
$A$ 中的所有元素模 $m$ 都等于同一个值 $a$. $$A=\{x\mid x \bmod m=a\}$$</description>
    </item>
    
    <item>
      <title>因数</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%9B%A0%E6%95%B0/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E5%9B%A0%E6%95%B0/</guid>
      <description>若无特殊说明，本章涉及的变量皆为正整数.
定义#若 $n \div d$ 为整数，则 $d$ 是 $n$ 的因数，记作 $d\mid n$.
算数基本定理#任意正整数 $n$ 都能唯一地分解为有限个质数的乘积.
$$n=p_1^{\normalsize c_1}\cdot p_2^{\normalsize c_2}\cdots p_m^{\normalsize c_m}$$
分解质因数#试除法#将 $n$ 分解成 算数基本定理 的形式. 如 $$360=2^3\times 3^2\times 5$$
枚举 $i=2,3,\cdots,\sqrt{n}$，除尽 $n$ 中的 $i$，并记录除的次数.
const int N = 1e6; vector&amp;lt;int&amp;gt; P, C; void factor(int n) { for (int i = 2; i &amp;lt;= sqrt(n); i ++) { if (n % i == 0) { P.</description>
    </item>
    
    <item>
      <title>质数</title>
      <link>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%B4%A8%E6%95%B0/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BF%A1%E6%81%AF%E5%AD%A6/%E6%95%B0%E8%AE%BA/%E8%B4%A8%E6%95%B0/</guid>
      <description>若无特殊说明，本章涉及的变量皆为正整数.
定义#若 $n$ 只能被 $1$ 和 $n$ 整除，则 $n$ 是质数，否则是合数. $\pi(n)$：$n$ 以内的质数个数，$\pi(n)≈\frac{n}{\ln{n}}$. $p(n)$：第 $n$ 个质数，$p(n)≈n\ln{n}$. 质数判定#若 $n$ 为合数，则必定存在 $i≤\sqrt{n}$，使 $n$ 能整除 $i$. $n=0,1$ 需要特判.
时间复杂度：$O(\sqrt n)$.
bool isPrime(int n) { if (n &amp;lt; 2) return false; for (int i = 2; i &amp;lt;= sqrt(n); i ++) if (n % i == 0) return false; return true; } 质数筛法#求 $n$ 以内的所有质数.
暴力算法#对 $[2,n]$ 中的所有整数进行一次 质数判定.</description>
    </item>
    
  </channel>
</rss>
